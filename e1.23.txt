2017.02.09 Thursday
e1.23

> [Before change]

> (search-for-primes (fast-expt 10 11) 3)

100000000003 *** 508309
100000000019 *** 497219
100000000057 *** 539202
end
> (search-for-primes (fast-expt 10 12) 3)

1000000000039 *** 1711097
1000000000061 *** 1680467
1000000000063 *** 1673605
end
> (search-for-primes (fast-expt 10 13) 3)

10000000000037 *** 4641565
10000000000051 *** 4711989
10000000000099 *** 6703482
end

> [After change]

> (search-for-primes (fast-expt 10 11) 3)

100000000003 *** 406236
100000000019 *** 367436
100000000057 *** 307265
end
> (search-for-primes (fast-expt 10 12) 3)

1000000000039 *** 944156
1000000000061 *** 2247200
1000000000063 *** 3156498
end
> (search-for-primes (fast-expt 10 13) 3)

10000000000037 *** 2971204
10000000000051 *** 2950926
10000000000099 *** 2883813
end

>> Too lazy to put together the ratios.  There's a lot of variance in the times to begin with, I would guess because of CPU caching?? Anyway, the ratios seem pretty close to 2, probably not quite there.  There must be a little overhead from the call to a new function and the if statement in the function.  Here's the function and where it's used:

(define (next x)
  (if (= x 2)
      3
      (+ x 2)))

(define (find-divisor n test-divisor)
  (cond ((> (square test-divisor) n) n)
        ((divides? test-divisor n) test-divisor)
        (else (find-divisor n (next test-divisor)))))

