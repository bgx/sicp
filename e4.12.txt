2022.03.02 Wednesday
e4.12

>

Tests that must pass:

(define test-env1 (extend-environment '(w x y) '(8 3 5) the-empty-environment))
(define test-env2 (extend-environment '(x z) '(7 6) test-env1))
(define test-env3 (extend-environment '(m y) '(1 2) test-env1))

(define (assert-equal left right)
  (cond ((= left right)
         (newline)
         (display "pass: ")
         (display left)
         (display " == ")
         (display right)
         )
        (else (newline)
              (display "FAIL: ")
              (display left)
              (display " == ")
              (display right))))

(define (run-tests env1 env2 env3)
  (define lookup lookup-variable-value)
  (begin
    (newline) (display "initial test environments")
    (assert-equal 8 (lookup 'w env1))
    (assert-equal 3 (lookup 'x env1))
    (assert-equal 5 (lookup 'y env1))
    (assert-equal 8 (lookup 'w env2))
    (assert-equal 7 (lookup 'x env2))
    (assert-equal 5 (lookup 'y env2))
    (assert-equal 6 (lookup 'z env2))
    (assert-equal 8 (lookup 'w env3))
    (assert-equal 3 (lookup 'x env3))
    (assert-equal 2 (lookup 'y env3))
    (assert-equal 1 (lookup 'm env3))
    (newline) (display "(set-variable-value! 'w 12 env1)")
    (set-variable-value! 'w 12 env1)
    (assert-equal 12 (lookup 'w env1))
    (assert-equal  3 (lookup 'x env1))
    (assert-equal  5 (lookup 'y env1))
    (assert-equal 12 (lookup 'w env2))
    (assert-equal  7 (lookup 'x env2))
    (assert-equal  5 (lookup 'y env2))
    (assert-equal  6 (lookup 'z env2))
    (assert-equal 12 (lookup 'w env3))
    (assert-equal  3 (lookup 'x env3))
    (assert-equal  2 (lookup 'y env3))
    (assert-equal  1 (lookup 'm env3))
    (newline) (display "(set-variable-value! 'w 13 env2)")
    (set-variable-value! 'w 13 env2)
    (assert-equal 13 (lookup 'w env1))
    (assert-equal  3 (lookup 'x env1))
    (assert-equal  5 (lookup 'y env1))
    (assert-equal 13 (lookup 'w env2))
    (assert-equal  7 (lookup 'x env2))
    (assert-equal  5 (lookup 'y env2))
    (assert-equal  6 (lookup 'z env2))
    (assert-equal 13 (lookup 'w env3))
    (assert-equal  3 (lookup 'x env3))
    (assert-equal  2 (lookup 'y env3))
    (assert-equal  1 (lookup 'm env3))
    (newline) (display "(set-variable-value! 'x 14 env1)")
    (set-variable-value! 'x 14 env1)
    (assert-equal 13 (lookup 'w env1))
    (assert-equal 14 (lookup 'x env1))
    (assert-equal  5 (lookup 'y env1))
    (assert-equal 13 (lookup 'w env2))
    (assert-equal  7 (lookup 'x env2))
    (assert-equal  5 (lookup 'y env2))
    (assert-equal  6 (lookup 'z env2))
    (assert-equal 13 (lookup 'w env3))
    (assert-equal 14 (lookup 'x env3))
    (assert-equal  2 (lookup 'y env3))
    (assert-equal  1 (lookup 'm env3))
    (newline) (display "(set-variable-value! 'x 15 env2)")
    (set-variable-value! 'x 15 env2)
    (assert-equal 13 (lookup 'w env1))
    (assert-equal 14 (lookup 'x env1))
    (assert-equal  5 (lookup 'y env1))
    (assert-equal 13 (lookup 'w env2))
    (assert-equal 15 (lookup 'x env2))
    (assert-equal  5 (lookup 'y env2))
    (assert-equal  6 (lookup 'z env2))
    (assert-equal 13 (lookup 'w env3))
    (assert-equal 14 (lookup 'x env3))
    (assert-equal  2 (lookup 'y env3))
    (assert-equal  1 (lookup 'm env3))
    (newline) (display "(set-variable-value! 'y 16 env1)")
    (set-variable-value! 'y 16 env1)
    (assert-equal 13 (lookup 'w env1))
    (assert-equal 14 (lookup 'x env1))
    (assert-equal 16 (lookup 'y env1))
    (assert-equal 13 (lookup 'w env2))
    (assert-equal 15 (lookup 'x env2))
    (assert-equal 16 (lookup 'y env2))
    (assert-equal  6 (lookup 'z env2))
    (assert-equal 13 (lookup 'w env3))
    (assert-equal 14 (lookup 'x env3))
    (assert-equal  2 (lookup 'y env3))
    (assert-equal  1 (lookup 'm env3))
    (newline) (display "(set-variable-value! 'y 17 env3)")
    (set-variable-value! 'y 17 env3)
    (assert-equal 13 (lookup 'w env1))
    (assert-equal 14 (lookup 'x env1))
    (assert-equal 16 (lookup 'y env1))
    (assert-equal 13 (lookup 'w env2))
    (assert-equal 15 (lookup 'x env2))
    (assert-equal 16 (lookup 'y env2))
    (assert-equal  6 (lookup 'z env2))
    (assert-equal 13 (lookup 'w env3))
    (assert-equal 14 (lookup 'x env3))
    (assert-equal 17 (lookup 'y env3))
    (assert-equal  1 (lookup 'm env3))
    (newline) (display "(define-variable! 'z 18 env2)")
    (define-variable! 'z 18 env2)
    (assert-equal 13 (lookup 'w env1))
    (assert-equal 14 (lookup 'x env1))
    (assert-equal 16 (lookup 'y env1))
    (assert-equal 13 (lookup 'w env2))
    (assert-equal 15 (lookup 'x env2))
    (assert-equal 16 (lookup 'y env2))
    (assert-equal 18 (lookup 'z env2))
    (assert-equal 13 (lookup 'w env3))
    (assert-equal 14 (lookup 'x env3))
    (assert-equal 17 (lookup 'y env3))
    (assert-equal  1 (lookup 'm env3))
    (newline) (display "(define-variable! 'z 19 env3)")
    (define-variable! 'z 19 env3)
    (assert-equal 13 (lookup 'w env1))
    (assert-equal 14 (lookup 'x env1))
    (assert-equal 16 (lookup 'y env1))
    (assert-equal 13 (lookup 'w env2))
    (assert-equal 15 (lookup 'x env2))
    (assert-equal 16 (lookup 'y env2))
    (assert-equal 18 (lookup 'z env2))
    (assert-equal 13 (lookup 'w env3))
    (assert-equal 14 (lookup 'x env3))
    (assert-equal 17 (lookup 'y env3))
    (assert-equal  1 (lookup 'm env3))
    (assert-equal 19 (lookup 'z env3))
    ))

(define (run-test-lookup-error env)
  (lookup-variable-value 'e env))

(define (run-test-set-error env)
  (set-variable-value! 'e 9 env))

(define (run-test-define-error)
  (define-variable! 'e 9 the-empty-environment))

; To run:
; (run-tests test-env1 test-env2 test-env3)
; (run-test-lookup-error test-env1)
; (run-test-set-error test-env1)
; (run-test-define-error)

>>

(define (scan-frame frame var not-found-action found-action)
  (define (scan-loop vars vals)
    (cond ((null? vars) (not-found-action))
          ((eq? var (car vars)) (found-action vals))
          (else (scan-loop (cdr vars) (cdr vals)))))
  (scan-loop (frame-variables frame)
             (frame-values frame)))
  
(define (scan-env env var not-found-action found-action)
  (if (eq? env the-empty-environment)
      (not-found-action)
      (scan-frame
         (first-frame env)
         var
         (lambda () (scan-env (enclosing-environment env) var not-found-action found-action))
         found-action)))

(define (get-value) (lambda (vals) (car vals)))
(define (set-value val) (lambda (vals) (set-car! vals val)))

(define (lookup-variable-value var env)
  (scan-env env var (lambda () (error "Unbound variable" var)) (get-value)))

(define (set-variable-value! var val env)
  (scan-env env var (lambda () (error "Unbound variable -- SET!" var)) (set-value val)))

(define (define-variable! var val env)
  (let ((frame (first-frame env)))
    (scan-frame frame var (lambda () (add-binding-to-frame! var val frame)) (set-value val))))

>>>

I like the first take here: http://community.schemewiki.org/?sicp-ex-4.12

It combines my "scan-env" and "scan-frame" into one "traverse" method.

 (define (traverse var env on-find on-frame-end on-env-end) 
     (define (env-loop env) 
         (define (scan vars vals) 
             (cond ((null? vars) (on-frame-end env)) 
                   ((eq? var (car vars)) (on-find vals)) 
                   (else (scan (cdr vars) (cdr vals))))) 
         (if (eq? env the-empty-environment) 
             (on-env-end) 
             (let ((frame (first-frame env))) 
                 (scan (frame-variables frame) 
                       (frame-values frame))))) 
     (env-loop env)) 
  
 (define (lookup-variable-value var env) 
     (traverse var 
                env 
                (lambda (vals) (car vals)) 
                (lambda (env) (lookup-variable-value var (enclosing-environment env))) 
                (lambda () (error "Unbound variable -- lookup-variable-value" var)))) 
  
 (define (set-variable-value! var val env) 
    (traverse var 
               env 
               (lambda (vals) (set-car! vals val)) 
               (lambda (env) (set-variable-value! var val (enclosing-environment env))) 
               (lambda () (error "Unbound variable -- set-variable-value!" var)))) 
  
 (define (define-variable! var val env) 
     (traverse var 
                env 
                (lambda (vals) (set-car! vals val)) 
                (lambda (env) (add-binding-to-frame! var val (first-frame env))) 
                (lambda () (error "Empty environment -- define-variable!")))) 