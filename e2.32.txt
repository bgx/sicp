2017.08.17 Thursday
e2.32

>>

(define (subsets s)
  (if (null? s)
      (list '())
      (let ((rest (subsets (cdr s))))
        (append rest 
                (map (lambda (x) (cons (car s) x))
                     rest)))))

>>>

> (subsets (list 1 2 3 4))
{() {4} {3} {3 4} {2} {2 4} {2 3} {2 3 4} {1} {1 4} {1 3} {1 3 4} {1 2} {1 2 4} {1 2 3} {1 2 3 4}}

>>>

lets work through what happens for the above example where the initial set is (list 1 2 3 4).

subsets is called recursively until s is (4); (cdr s), or (cdr (4)) is the empty list; and the empty list is returned from subsets.  at that point, rest will be the empty list.

()

to the empty list is appended a map where we cons (car s) == (car (4)) == 4 with each item of rest, or ()

() is appended with (4) to get

() (4)

this is the return of subsets and is assigned to rest in the subsets call one level up

to this returned value is appended a map where we cons (car s) == (car (3 4)) == 3 with each item of rest

() (4) is appended with (3) (3 4) to get

() (4) (3) (3 4)

this is the return of subsets and is assigned to rest in the subsets call one level up

to this returned value is appended a map where we cons (car s) == (car (2 3 4)) == 2 with each item of rest

() (4) (3) (3 4) is appended with (2) (2 4) (2 3) (2 3 4) to get

() (4) (3) (3 4) (2) (2 4) (2 3) (2 3 4)

one more time and we have

() (4) (3) (3 4) (2) (2 4) (2 3) (2 3 4) (1) (1 4) (1 3) (1 3 4) (1 2) (1 2 4) (1 2 3) (1 2 3 4)

which is then returned from the subsets that is called with s == (1 2 3 4)
