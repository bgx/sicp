2017.08.24 Thursday
e2.37

>>

(define (dot-product v w)
  (accumulate + 0 (map * v w)))

(define (matrix-*-vector m v)
  (map (lambda (mv) (dot-product mv v)) m))

(define (transpose mat)
  (accumulate-n cons '() mat))

(define (matrix-*-matrix m n)
  (let ((cols (transpose n)))
    (map (lambda (mv) (matrix-*-vector cols mv)) m)))

>>>

(define test-matrix (list (list 1 2 3 4) (list 5 6 7 8) (list 9 10 11 12)))
(define test-vector (list -1 -1 -1 -1))
(define test-matrix2 (list (list 1 2) (list 3 4) (list 5 6) (list 7 8)))
