2017.10.28 Saturday
e3.2

>>

(define (make-monitored f)
  (let ((count 0))
    (lambda (x)
      (cond ((eq? x 'how-many-calls?) count)
            ((eq? x 'reset-count) (set! count 0))
            (else (set! count (+ count 1))
                  (f x))))))

>>>

Note that no use of begin is necessary

pg. 221 footnote 3, "the <consequent> part of each clause in a cond expression can be a sequence of expressions rather than a single expression"